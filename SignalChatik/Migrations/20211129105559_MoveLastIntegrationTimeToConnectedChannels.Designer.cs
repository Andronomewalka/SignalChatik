// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SignalChatik;

namespace SignalChatik.Migrations
{
    [DbContext(typeof(ChatikContext))]
    [Migration("20211129105559_MoveLastIntegrationTimeToConnectedChannels")]
    partial class MoveLastIntegrationTimeToConnectedChannels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SignalChatik.Models.AuthUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AuthUsers");
                });

            modelBuilder.Entity("SignalChatik.Models.AuthUserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthUserId")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthUserId");

                    b.ToTable("AuthUserRefreshTokens");
                });

            modelBuilder.Entity("SignalChatik.Models.AuthUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthUserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthUserId");

                    b.ToTable("AuthUserRoles");
                });

            modelBuilder.Entity("SignalChatik.Models.Channel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChannelTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("SignalChatik.Models.ConnectedChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConnectedChannelId")
                        .HasColumnType("int");

                    b.Property<int>("ForChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastInteractionTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedChannelId");

                    b.HasIndex("ForChannelId");

                    b.ToTable("ConnectedChannels");
                });

            modelBuilder.Entity("SignalChatik.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SignalChatik.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("SignalChatik.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthUserId")
                        .HasColumnType("int");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthUserId")
                        .IsUnique();

                    b.HasIndex("ChannelId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SignalChatik.Models.AuthUserRefreshToken", b =>
                {
                    b.HasOne("SignalChatik.Models.AuthUser", "AuthUser")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AuthUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthUser");
                });

            modelBuilder.Entity("SignalChatik.Models.AuthUserRole", b =>
                {
                    b.HasOne("SignalChatik.Models.AuthUser", "AuthUser")
                        .WithMany("Roles")
                        .HasForeignKey("AuthUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthUser");
                });

            modelBuilder.Entity("SignalChatik.Models.ConnectedChannel", b =>
                {
                    b.HasOne("SignalChatik.Models.Channel", "Connected")
                        .WithMany("ConnectedChannels")
                        .HasForeignKey("ConnectedChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SignalChatik.Models.Channel", "For")
                        .WithMany("ForChannels")
                        .HasForeignKey("ForChannelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Connected");

                    b.Navigation("For");
                });

            modelBuilder.Entity("SignalChatik.Models.Message", b =>
                {
                    b.HasOne("SignalChatik.Models.Channel", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SignalChatik.Models.Channel", "Sender")
                        .WithMany("SendedMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SignalChatik.Models.Room", b =>
                {
                    b.HasOne("SignalChatik.Models.Channel", "Channel")
                        .WithOne("Room")
                        .HasForeignKey("SignalChatik.Models.Room", "ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalChatik.Models.User", "Owner")
                        .WithMany("OwnedRooms")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SignalChatik.Models.User", b =>
                {
                    b.HasOne("SignalChatik.Models.AuthUser", "Auth")
                        .WithOne("User")
                        .HasForeignKey("SignalChatik.Models.User", "AuthUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalChatik.Models.Channel", "Channel")
                        .WithOne("User")
                        .HasForeignKey("SignalChatik.Models.User", "ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auth");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("SignalChatik.Models.AuthUser", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Roles");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SignalChatik.Models.Channel", b =>
                {
                    b.Navigation("ConnectedChannels");

                    b.Navigation("ForChannels");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("Room");

                    b.Navigation("SendedMessages");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SignalChatik.Models.User", b =>
                {
                    b.Navigation("OwnedRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
